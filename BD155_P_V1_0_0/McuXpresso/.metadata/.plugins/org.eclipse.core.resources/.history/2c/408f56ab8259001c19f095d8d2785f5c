/*
 * Copyright (c) 2016, Freescale Semiconductor, Inc.
 * Copyright 2016-2017 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */
#include "sourceMain.h"

/*******************************************************************************
 * Definitions
 ******************************************************************************/



#define APP_PXP                PXP
#define EXAMPLE_GPT            GPT2
#define EXAMPLE_GPT_TICK_TO_MS 25

#define DEMO_SDCARD_POWER_CTRL_FUNCTION_EXIST
#define BUFFER_SIZE (1500)
FRESULT error;

void BOARD_PowerOffSDCARD(void);
void BOARD_PowerOnSDCARD(void);
int funcSdCardApplication(void);

static status_t sdcardWaitCardInsert(void);

static FATFS g_fileSystem; /* File system object */
static FIL g_fileObject;   /* File object */
static FIL g_fileObject1;

static DIR g_opendir;

SDK_ALIGN(uint8_t g_bufferWrite[BUFFER_SIZE], BOARD_SDMMC_DATA_BUFFER_ALIGN_SIZE);
SDK_ALIGN(uint8_t g_bufferRead[BUFFER_SIZE], BOARD_SDMMC_DATA_BUFFER_ALIGN_SIZE);
FRESULT error;
DIR directory; /* Directory object */
FILINFO fileInformation;
UINT bytesWritten;
UINT bytesRead;
/*******************************************************************************



static usb_status_t USB_HostEvent(usb_device_handle deviceHandle,
                                  usb_host_configuration_handle configurationHandle,
                                  uint32_t eventCode);

/*!
 * @brief app initialization.
 */
static void USB_HostApplicationInit(void);

extern void USB_HostClockInit(void);
extern void USB_HostIsrEnable(void);
extern void USB_HostTaskFn(void *param);
void BOARD_InitHardware(void);
void BOARD_EnableLcdInterrupt(void);

extern usb_host_msd_fatfs_instance_t g_MsdFatfsInstance;
usb_host_handle g_HostHandle;

/*******************************************************************************
 * Prototypes
 ******************************************************************************/
void BOARD_EnableLcdInterrupt(void);

/*******************************************************************************
 * Code
 ******************************************************************************/

/* Initialize the LCD_DISP. */
void BOARD_InitLcd(void)
{
    volatile uint32_t i = 0x1000U;

    gpio_pin_config_t config = {
        kGPIO_DigitalOutput,
        0,
        kGPIO_NoIntmode,
    };

    /* Reset the LCD. */
    GPIO_PinInit(LCD_DISP_GPIO, LCD_DISP_GPIO_PIN, &config);

    GPIO_WritePinOutput(LCD_DISP_GPIO, LCD_DISP_GPIO_PIN, 0);

    while (i--)
    {
    }

    GPIO_WritePinOutput(LCD_DISP_GPIO, LCD_DISP_GPIO_PIN, 1);

    /* Backlight. */
    config.outputLogic = 1;
    GPIO_PinInit(LCD_BL_GPIO, LCD_BL_GPIO_PIN, &config);

    /*Clock setting for LPI2C*/
    CLOCK_SetMux(kCLOCK_Lpi2cMux, LPI2C_CLOCK_SOURCE_SELECT);
    CLOCK_SetDiv(kCLOCK_Lpi2cDiv, LPI2C_CLOCK_SOURCE_DIVIDER);
}

void BOARD_InitLcdifPixelClock(void)
{
    /*
     * The desired output frame rate is 60Hz. So the pixel clock frequency is:
     * (480 + 41 + 4 + 18) * (272 + 10 + 4 + 2) * 60 = 9.2M.
     * Here set the LCDIF pixel clock to 9.3M.
     */

    /*
     * Initialize the Video PLL.
     * Video PLL output clock is OSC24M * (loopDivider + (denominator / numerator)) / postDivider = 93MHz.
     */
    clock_video_pll_config_t config = {
        .loopDivider = 31,
        .postDivider = 8,
        .numerator   = 0,
        .denominator = 0,
    };

    CLOCK_InitVideoPll(&config);

    /*
     * 000 derive clock from PLL2
     * 001 derive clock from PLL3 PFD3
     * 010 derive clock from PLL5
     * 011 derive clock from PLL2 PFD0
     * 100 derive clock from PLL2 PFD1
     * 101 derive clock from PLL3 PFD1
     */
    CLOCK_SetMux(kCLOCK_LcdifPreMux, 2);

    CLOCK_SetDiv(kCLOCK_LcdifPreDiv, 4);

    CLOCK_SetDiv(kCLOCK_LcdifDiv, 1);
}

void BOARD_InitGPT(void)
{
    gpt_config_t gptConfig;

    GPT_GetDefaultConfig(&gptConfig);

    gptConfig.enableFreeRun = true;
    gptConfig.divider       = 3000;

    /* Initialize GPT module */
    GPT_Init(EXAMPLE_GPT, &gptConfig);
    GPT_StartTimer(EXAMPLE_GPT);
}

/*******************************************************************************
 * Code
 ******************************************************************************/

void USB_OTG1_IRQHandler(void)
{
    USB_HostEhciIsrFunction(g_HostHandle);
}

void USB_OTG2_IRQHandler(void)
{
    USB_HostEhciIsrFunction(g_HostHandle);
}

void USB_HostClockInit(void)
{
    usb_phy_config_struct_t phyConfig = {
        BOARD_USB_PHY_D_CAL,
        BOARD_USB_PHY_TXCAL45DP,
        BOARD_USB_PHY_TXCAL45DM,
    };

    if (CONTROLLER_ID == kUSB_ControllerEhci0)
    {
        CLOCK_EnableUsbhs0PhyPllClock(kCLOCK_Usbphy480M, 480000000U);
        CLOCK_EnableUsbhs0Clock(kCLOCK_Usb480M, 480000000U);
    }
    else
    {
        CLOCK_EnableUsbhs1PhyPllClock(kCLOCK_Usbphy480M, 480000000U);
        CLOCK_EnableUsbhs1Clock(kCLOCK_Usb480M, 480000000U);
    }
    USB_EhciPhyInit(CONTROLLER_ID, BOARD_XTAL0_CLK_HZ, &phyConfig);
}

void USB_HostIsrEnable(void)
{
    uint8_t irqNumber;

    uint8_t usbHOSTEhciIrq[] = USBHS_IRQS;
    irqNumber                = usbHOSTEhciIrq[CONTROLLER_ID - kUSB_ControllerEhci0];
/* USB_HOST_CONFIG_EHCI */

/* Install isr, set priority, and enable IRQ. */
#if defined(__GIC_PRIO_BITS)
    GIC_SetPriority((IRQn_Type)irqNumber, USB_HOST_INTERRUPT_PRIORITY);
#else
    NVIC_SetPriority((IRQn_Type)irqNumber, USB_HOST_INTERRUPT_PRIORITY);
#endif
    EnableIRQ((IRQn_Type)irqNumber);
}

void USB_HostTaskFn(void *param)
{
    USB_HostEhciTaskFunction(param);
}

/*!
 * @brief USB isr function.
 */

#if ((defined USB_HOST_CONFIG_COMPLIANCE_TEST) && (USB_HOST_CONFIG_COMPLIANCE_TEST))
extern usb_status_t USB_HostTestEvent(usb_device_handle deviceHandle,
                                      usb_host_configuration_handle configurationHandle,
                                      uint32_t eventCode);
#endif

static usb_status_t USB_HostEvent(usb_device_handle deviceHandle,
                                  usb_host_configuration_handle configurationHandle,
                                  uint32_t eventCode)
{
#if ((defined USB_HOST_CONFIG_COMPLIANCE_TEST) && (USB_HOST_CONFIG_COMPLIANCE_TEST))
    usb_host_configuration_t *configuration;
    usb_status_t status1;
    usb_status_t status2;
    uint8_t interfaceIndex = 0;
#endif
    usb_status_t status = kStatus_USB_Success;
    switch (eventCode & 0x0000FFFFU)
    {
        case kUSB_HostEventAttach:
#if ((defined USB_HOST_CONFIG_COMPLIANCE_TEST) && (USB_HOST_CONFIG_COMPLIANCE_TEST))
            status1 = USB_HostTestEvent(deviceHandle, configurationHandle, eventCode);
            status2 = USB_HostMsdEvent(deviceHandle, configurationHandle, eventCode);
            if ((status1 == kStatus_USB_NotSupported) && (status2 == kStatus_USB_NotSupported))
            {
                status = kStatus_USB_NotSupported;
            }
#else
            status = USB_HostMsdEvent(deviceHandle, configurationHandle, eventCode);
#endif
            break;

        case kUSB_HostEventNotSupported:
#if ((defined USB_HOST_CONFIG_COMPLIANCE_TEST) && (USB_HOST_CONFIG_COMPLIANCE_TEST))
            configuration = (usb_host_configuration_t *)configurationHandle;
            for (interfaceIndex = 0; interfaceIndex < configuration->interfaceCount; ++interfaceIndex)
            {
                if (((usb_descriptor_interface_t *)configuration->interfaceList[interfaceIndex].interfaceDesc)
                        ->bInterfaceClass == 9U) /* 9U is hub class code */
                {
                    break;
                }
            }

            if (interfaceIndex < configuration->interfaceCount)
            {
                usb_echo("unsupported hub\r\n");
            }
            else
            {
                usb_echo("Unsupported Device\r\n");
            }
#else
            usb_echo("Unsupported Device\r\n");
#endif
            break;

        case kUSB_HostEventEnumerationDone:
#if ((defined USB_HOST_CONFIG_COMPLIANCE_TEST) && (USB_HOST_CONFIG_COMPLIANCE_TEST))
            status1 = USB_HostTestEvent(deviceHandle, configurationHandle, eventCode);
            status2 = USB_HostMsdEvent(deviceHandle, configurationHandle, eventCode);
            if ((status1 != kStatus_USB_Success) && (status2 != kStatus_USB_Success))
            {
                status = kStatus_USB_Error;
            }
#else
            status = USB_HostMsdEvent(deviceHandle, configurationHandle, eventCode);
#endif
            break;

        case kUSB_HostEventDetach:
#if ((defined USB_HOST_CONFIG_COMPLIANCE_TEST) && (USB_HOST_CONFIG_COMPLIANCE_TEST))
            status1 = USB_HostTestEvent(deviceHandle, configurationHandle, eventCode);
            status2 = USB_HostMsdEvent(deviceHandle, configurationHandle, eventCode);
            if ((status1 != kStatus_USB_Success) && (status2 != kStatus_USB_Success))
            {
                status = kStatus_USB_Error;
            }
#else
            status = USB_HostMsdEvent(deviceHandle, configurationHandle, eventCode);
#endif
            break;

        case kUSB_HostEventEnumerationFail:
            usb_echo("enumeration failed\r\n");
            break;

        default:
            break;
    }
    return status;
}

static void USB_HostApplicationInit(void)
{
    usb_status_t status = kStatus_USB_Success;

    USB_HostClockInit();

#if ((defined FSL_FEATURE_SOC_SYSMPU_COUNT) && (FSL_FEATURE_SOC_SYSMPU_COUNT))
    SYSMPU_Enable(SYSMPU, 0);
#endif /* FSL_FEATURE_SOC_SYSMPU_COUNT */

    status = USB_HostInit(CONTROLLER_ID, &g_HostHandle, USB_HostEvent);
    if (status != kStatus_USB_Success)
    {
        usb_echo("host init error\r\n");
        return;
    }
    USB_HostIsrEnable();

    usb_echo("host init done\r\n");
}


void SysTick_Handler(void)
{
	funcKeypadPeriodicTimeCall();

	if(bStartRawFrameLog == 1)
	{
		guiRawLogCount++;
		if(guiRawLogCount >= 100)
		{
			guiRawLogCount = 0;
			gucRecTimeCount--;

			if(gucRecTimeCount == 0)
			{
				bStartRawFrameLog 	= 0;
				gucRecTimeCount 	= 0;
				guiRawLogCount		= 0;
				gucRecordingStatus  = 2;
			}
		}
	}

	if(guiDiagTimer==1)
	{
		guiDiagCounter++;
		if(guiDiagCounter >= 300)
		{
			guiDiagCounter=0;
			guiRequestDM1Data=1;
			guiDiagCounttemp++;
		}
		if(guiDiagCounttemp==2)
		{
			guiDiagCounter=0;
			guiDiagCounttemp=0;
			guiDiagPopUp = 0;
			guiDiagTimer=0;
		}
	}

	if(bStartMinMaxFrameLog == 1)
	{
		guiLogFileSize++;
	}

	if(bStartFaultFrameLog == 1)
	{
		guiLogFileSize++;
	}

	if(update_rpm == 1)
	{
		cnt_rpm++;
		if(cnt_rpm > 400)
		{
			cnt_rpm = 0;
			update_rpm = 0;
		}
	}
	funcTransmitCanFrame();

	guiToggleCount++;
	if(guiToggleCount >= 100)
	{
		bToggleBit = !bToggleBit;
	}

//	if(bNightMode == 1)
//	{
//		if(bNightMode != bPrevMode)
//		{
//			bPrevMode = bNightMode;
//			giMode = bNightMode;
//		}
//		giMode++;
//		if(giMode > 8)
//		{
//			giMode = 1;
//		}
//	}
//	else
//	{
//		if(bNightMode != bPrevMode)
//		{
//			bPrevMode = bNightMode;
//			giMode = bNightMode;
//		}
//		giMode++;
//		if(giMode > 18)
//		{
//			giMode = 11;
//		}
//	}

	if(CANBStartTimer==1)
	{

		CANBTimeoutCounter++;

		if(CANBTimeoutCounter>50)
		{
			CANBTimeoutCounter=0;
			CANBTimeout=1;
			CANBStartTimer=0;
		}

	}

	if(giScreenSwitch == 0)
	{
		giScreenTimeCount++;
		if(giScreenTimeCount > 300)
		{
			giScreenTimeCount = 0;
			giScreenSwitch = 1;
			gucCurrentScreen = 1;
		}
	}

	if(giScreenSwitch == 1)
	{
		giScreenTimeCount++;
		if(giScreenTimeCount > 300)
		{
			giScreenTimeCount = 0;
			giScreenSwitch = 2;
			gucCurrentScreen = 2;
		}
	}

	if(giScreenSwitch == 2)
	{
		giScreenTimeCount++;
		if(giScreenTimeCount > 300)
		{
			giScreenTimeCount = 0;
			giScreenSwitch = 3;
			gucCurrentScreen = 3;
		}
	}

	if(giScreenSwitch == 3)
	{
		giScreenTimeCount++;
		if(giScreenTimeCount > 100)
		{
			giScreenTimeCount = 0;
			giScreenSwitch = 4;
			gucCurrentScreen = 4;
		}
	}

	if(giScreenSwitch == 4)
	{
		giScreenTimeCount++;
		if(giScreenTimeCount > 300)
		{
			giScreenTimeCount = 0;
			giScreenSwitch = 5;
			gucCurrentScreen = 5;
		}
	}

	if(giScreenSwitch == 5)
	{
		giScreenTimeCount++;
		if(giScreenTimeCount > 300)
		{
			giScreenTimeCount = 0;
			giScreenSwitch = 6;
			gucCurrentScreen = 6;
			guiIconScreen=0;
		}
	}
}
/*!
 * @brief Main function
 */
bool bdel=0;
int i1=0;
extern uint8_t gLOG_DATA_TYPE_APP;

int main(void)
{
    BOARD_ConfigMPU();
    BOARD_InitBootPins();
    BOARD_InitBootClocks();
    BOARD_InitLcdifPixelClock();
    BOARD_InitDebugConsole();
    BOARD_InitLcd();
    BOARD_InitGPT();

    USB_HostApplicationInit();
    funcCanaFrameConfigure();
    funcKeypadConfig();
    funcJ1939Config();
    funcJ1939MailboxConfigure();

    SysTick_Config(SystemCoreClock / 100);
    funcVariableInit();

    GUI_Init();

//	SDCardfuncBegin=1;
//	power_on_SD=1;
//  funcSdCardApplication();

    while(1)
    {
    	if(bDM1RxComplete == 1)
    	{
    		bDM1RxComplete = 0;
    		funcLoadFaultToStruct(gucSa);
    		memset(&strCanbTp,	0,	sizeof(strCanbTp));
    	}

    	funcDm1ScreenScroll();

    	gucKeyPressed = strKeypadStatus.normalPress;
    	funcProcessDisplayData();
    	gucKeyPressed = 0;
    	strKeypadStatus.normalPress = 0;

//    	funcProcessAnalogInput();
//    	funcProcessDigitalInput();
//   	MainTask();

//    	if(bStartRawFrameUsb == 1)
//    	{
			USB_HostTaskFn(g_HostHandle);
			USB_HostMsdTask(&g_MsdFatfsInstance);
//    	}

	    if(bStartRawFrameUsb == 1)
	    {
	  	  GUI_SetBkColor(GUI_WHITE);
	  	  GUI_Clear();
	    }
	    else
	    {
	  	  GUI_SetBkColor(GUI_RED);
	  	  GUI_Clear();
	    }

//    	funcSdCardtest();

    	//sdcard_status=funcSdCardApplication();
    }
    return 0;
}

int funcSdCardApplication(void)
{
	unsigned int i=0,j=0;
	unsigned long pos=0;
//---------------------------------------------------------------------------
//    FRESULT error;
//    DIR directory; /* Directory object */
//    FILINFO fileInformation;
//    UINT bytesWritten;
//    UINT bytesRead;

    const TCHAR driverNumberBuffer[3U] = {SDDISK + '0', ':', '/'};
    volatile bool failedFlag           = false;
    char ch                            = '0';

    BYTE work[FF_MAX_SS];

if(power_on_SD==1)
{
	   power_on_SD=0;

	   if (sdcardWaitCardInsert() != kStatus_Success)
       {
    	  SDCardfuncBegin=0;
          return 1;
       }

       if (f_mount(&g_fileSystem, driverNumberBuffer, 0U))
       {
//           PRINTF("Mount volume failed.\r\n");
    	   SDCardfuncBegin=0;
           return 1;
       }

		#if (FF_FS_RPATH >= 2U)

			error = f_chdrive((char const *)&driverNumberBuffer[0U]);

			if (error)
			{
		//          PRINTF("Change drive failed.\r\n");
				return 1;
			}

		#endif

#if FF_USE_MKFS

    PRINTF("\r\nMake file system......The time may be long if the card capacity is big.\r\n");

    if (f_mkfs(driverNumberBuffer, 0, work, sizeof work))
    {
        PRINTF("Make file system failed.\r\n");

        return 1;
    }

#endif /* FF_USE_MKFS */

}
/*
if(SDCardfuncBegin==1)
{
       power_on=0;
       error = f_mkdir(_T("/EM1"));

       if(error)
       {
           if (error == FR_EXIST)
           {
        	   error = f_opendir(&g_opendir,_T("/EM1"));
           }
           else
           {
               return 1;
           }
       }

       error = f_open(&g_fileObject, _T("/EM1/abc.csv"), (FA_WRITE | FA_READ | FA_CREATE_ALWAYS));

       if (error)
       {
           if (error == FR_EXIST)
           {
        	   error = f_open(&g_fileObject, _T("/EM1/abc.csv"), (FA_WRITE | FA_READ | FA_OPEN_ALWAYS));
           }
           else
           {
    //           PRINTF("Open file failed.\r\n");
               return 1;
           }
       }
//     }
       g_bufferWrite[0]='A';
       g_bufferWrite[1]=',';
       g_bufferWrite[2]='B';
       g_bufferWrite[3]='\n';

       j=4;

       for(i=0;i<=9;i++)
       {
			g_bufferWrite[j]=(i+0x30);
			j++;
			g_bufferWrite[j]=',';
			j++;
			g_bufferWrite[j]=(i+0x30);
			j++;
			g_bufferWrite[j]='\n';
			j++;
       }

 	  if (f_lseek(&g_fileObject, datapt))
 	  {

 	  }

 //      PRINTF("Write data abc...xyz into the file. \r\n");

       error = f_write(&g_fileObject, g_bufferWrite, sizeof(g_bufferWrite), &bytesWritten);

		if ((error) || (bytesWritten != sizeof(g_bufferWrite)))
		{
	   //   		PRINTF("Write file failed. \r\n");
			        failedFlag = true;
	   //		    continue;
		}

		datapt+=45;

//     }
//
//   	  if (f_lseek(&g_fileObject, datapt))
//   	  {
//  // 			PRINTF("Set file pointer position failed. \r\n");
//   	  }
//
//   	    memset(g_bufferRead, 0U, sizeof(g_bufferRead));
//
//   		error = f_read(&g_fileObject, g_bufferRead, 25, &bytesRead);
//
//   		if ((error) )//|| (bytesRead != sizeof(g_bufferRead)))
//   		{
//   //			PRINTF("Read file failed. \r\n");
//   			failedFlag = true;
//   			//continue;
//   		}
//
//   		if(power_on==1)
//   		{
//			error = f_open(&g_fileObject1, _T("/EM1/abc1.csv"), (FA_WRITE | FA_READ | FA_CREATE_ALWAYS));
//
//			if (error)
//			{
//				if (error == FR_EXIST)
//				{
//				  error = f_open(&g_fileObject1,  _T("/EM1/abc1.csv"), (FA_WRITE | FA_READ | FA_OPEN_ALWAYS));
//	//   				PRINTF("File exists.\r\n");
//				}
//				else
//				{
//	//   				PRINTF("Open file failed.\r\n");
//					return 1;
//				}
//
//			  }
//   		}
//
//   		power_on=0;
//
// //     PRINTF("Write data abc...xyz into the file. \r\n");
//
//   		error = f_write(&g_fileObject1, g_bufferRead,25, &bytesWritten);
//
//   		if ((error))// || (bytesWritten != sizeof(g_bufferWrite)))
//   		{
////   			PRINTF("Write file failed. \r\n");
//   			failedFlag = true;
//   		//		continue;
//   		}
//
//   		datapt+=45;
//   }

//if(file_close==1)
//{
//	file_close=0;

	if (f_close(&g_fileObject))
	{
//   			PRINTF("\r\nClose file failed.\r\n");
	}

   	f_closedir(&g_opendir);
//}

}
*/
   		return 0;
}

static status_t sdcardWaitCardInsert(void)
{
   BOARD_SD_Config(&g_sd, NULL, BOARD_SDMMC_SD_HOST_IRQ_PRIORITY, NULL);

   /* SD host init function */
   if (SD_HostInit(&g_sd) != kStatus_Success)
   {
//	   PRINTF("\r\nSD host init fail\r\n");
	   return kStatus_Fail;
   }

   /* wait card insert */
   if (SD_PollingCardInsert(&g_sd, kSD_Inserted) == kStatus_Success)
   {
//	   PRINTF("\r\nCard inserted.\r\n");
	   /* power off card */
	   SD_SetCardPower(&g_sd, false);
	   SD_SetCardPower(&g_sd, true);
   }
   else
   {
	   return kStatus_Fail;
   }

   return kStatus_Success;
}

void funcVariableInit(void)
{
    giScreenSwitch 		= 0;
    giScreenTimeCount	= 0;
    gcPowerOnExecute 	= 1;
    power_on_SD=1;
    SDCardfuncBegin = 1;

    giIcon01 = 1;
    giIcon02 = 1;
    giIcon03 = 1;
    giIcon04 = 1;
    giIcon05 = 1;
    giIcon06 = 1;
    giIcon07 = 1;
    giIcon08 = 1;
    giIcon09 = 1;
    giIcon10 = 1;
    giIcon11 = 1;
    giIcon12 = 1;
    giIcon13 = 1;
    giIcon14 = 1;
    giIcon15 = 1;

    bNightMode = 0;
    bPrevMode  = 1;
//    once = 1;
//    del = 0;
    del  = 2160;
    once = 2160;
    gucRecTimeCount = 30;

    guiEngOilInterval = 250;
    guiAirFilterInterval = 250;
    guiHydOilInterval = 250;
    guiSerEngInterval = 250;
    guiSerMacInterval = 250;

    guiEngOilNext = 250;
    guiAirFilterNext = 250;
    guiHydOilNext = 250;
    guiSerEngNext = 250;
    guiSerMacNext = 250;

    guiEngOilRemain = 250;
    guiAirFilterRemain = 250;
    guiHydOilRemain = 250;
    guiSerEngRemain = 250;
    guiSerMacRemain = 250;
}

void funcSdCardtest(void)
{
	file_close=0;
	unsigned int i=0;
	unsigned long count=0;

//	funcSdCardApplication();

//    FRESULT error;
//    DIR directory; /* Directory object */
//    FILINFO fileInformation;
//    UINT bytesWritten;
//    UINT bytesRead;

    const TCHAR driverNumberBuffer[3U] = {SDDISK + '0', ':', '/'};
    volatile bool failedFlag           = false;
    char ch                            = '0';

    BYTE work[FF_MAX_SS];

if(power_on_SD==1)
{
	   power_on_SD=0;

	   if (sdcardWaitCardInsert() != kStatus_Success)
       {
    	  SDCardfuncBegin=0;
          return 1;
       }

       if (f_mount(&g_fileSystem, driverNumberBuffer, 0U))
       {
//           PRINTF("Mount volume failed.\r\n");
    	   SDCardfuncBegin=0;
           return 1;
       }

		#if (FF_FS_RPATH >= 2U)

			error = f_chdrive((char const *)&driverNumberBuffer[0U]);

			if (error)
			{
		//          PRINTF("Change drive failed.\r\n");
				return 1;
			}

		#endif
}

	if(SDCardfuncBegin==1)
	{
		error = f_mkdir(_T("/EM1"));

		   if(error)
		   {
			   if (error == FR_EXIST)
			   {
				   error = f_opendir(&g_opendir,_T("/EM1"));
			   }
			   else
			   {
				   return 1;
			   }
		   }

		    error = f_open(&g_fileObject, _T("/EM1/MinMax_log_191021111030.csv"), (FA_WRITE | FA_READ | FA_OPEN_EXISTING));

		    f_lseek(&g_fileObject, datapt);
			memset(g_bufferRead, 0U, sizeof(g_bufferRead));
			error = f_read(&g_fileObject, g_bufferRead, sizeof(g_bufferRead), &bytesRead);

//			if (error)
//			{
//			    return 1;
//			}

			for(i=0;i<1500;i++)
			{
				if(g_bufferRead[i]=='\0')
				{
					count++;
				}
			}

			datapt+=1500;

			if(count>100)
			{
				    count=0;
					file_close=1;
					datapt=0;
			}

			memcpy(filecopy,g_bufferRead,sizeof(g_bufferRead));
			f_close(&g_fileObject);
			f_closedir(&g_opendir);
		}
 	 }
//}

